/****************************************************************************
|*
|* tap3xml: both directions XML<->TAP3 Converter.
|* 
|* $Id: tap3xml.cpp,v 1.27 2012/04/15 11:49:46 javier Exp $
|*
|* tap3edit Tools (http://www.tap3edit.com)
|* 
|* Copyright (C) 2007  Javier Gutierrez. All rights reserved.
|* email address <jgutierrez@tap3edit.com>
|* 
|* This program is free software; you can redistribute it and/or
|* modify it under the terms of the GNU General Public License
|* as published by the Free Software Foundation; either version 2
|* of the License, or (at your option) any later version.
|* 
|* This program is distributed in the hope that it will be useful,
|* but WITHOUT ANY WARRANTY; without even the implied warranty of
|* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
|* GNU General Public License for more details.
|* 
|* You should have received a copy of the GNU General Public License
|* along with this program; if not, write to the Free Software
|* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
|* 
|* 
|* Module: tap3xml.cpp
|*
|* Description:
|*
|*    Converts tap3 files into XML and viceversa.
|*
|* Author: Javier Gutierrez (JG)
|*
|* Modifications:
|*
|* When         Who     Pos.    What
|* 20050909     JG              Initial version
|*
****************************************************************************/

/* 1. Includes and defines */

#pragma warning(disable: 4786) /* To clean compile under MSVC */
#define _CRT_SECURE_NO_WARNINGS

#include "Xml.h"
#include "Asn.h"
#include "Buffin.h"
#include "Buffout.h"
#include "TapInfo.h"

#define SPEC_DIR "Spec/"

#define XML_HEADER "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
<!--\n\
    Generated by: tap3xml TAP3-XML Converter\n\
                  copyright (c) 2005-2016 Javier Gutierrez\n\
                  All rights reserved\n\
                  tap3edit Tools (http://www.tap3edit.com)\n\
-->\n"




/* 2. Global Variables */

vector<string>            specdir_list;


/* 3. Prototypes */

void    help                    ();
string  get_specfilename        (TapInfo *tapinfo);
string  get_specsuplfilename    (TapInfo *tapinfo);
string  get_specdir             (const string &filename);

using namespace std;

int main(int argc, char **argv)
{

    string buff, filein, fileout, option, path_env, path_item;
    string::size_type slash_pos = 0, i = 0, j = 0;
    char path_delim = '\0';



    /* 1. Variables setup */

    extern enc_dec_funcs edf[];
    extern map<string, int> simpletypes_map;
    extern map<int, enc_dec_funcs> simpletypes;


    /* Note: this was set originally into global.cpp but     */
    /*       Windows unfortunately does not support the      */
    /*       initialization of maps, so I should put it here */

    simpletypes_map.insert(pair<string,int>("OCTET STRING", 0));
    simpletypes_map.insert(pair<string,int>("INTEGER",      1));
    simpletypes_map.insert(pair<string,int>("BCDString",    2));
    simpletypes_map.insert(pair<string,int>("AsciiString",  3));
    simpletypes_map.insert(pair<string,int>("Currency",     4));
    simpletypes_map.insert(pair<string,int>("HexString",    5));
    simpletypes_map.insert(pair<string,int>("NumberString", 6));
    
    simpletypes.insert(pair<int, enc_dec_funcs>(0, edf[2]));
    simpletypes.insert(pair<int, enc_dec_funcs>(1, edf[1]));
    simpletypes.insert(pair<int, enc_dec_funcs>(2, edf[3]));
    simpletypes.insert(pair<int, enc_dec_funcs>(3, edf[0]));
    simpletypes.insert(pair<int, enc_dec_funcs>(4, edf[0]));
    simpletypes.insert(pair<int, enc_dec_funcs>(5, edf[0]));
    simpletypes.insert(pair<int, enc_dec_funcs>(6, edf[0]));


    /* 2. Arrange Directory to find the specifications ASN.1 */

    if (getenv(TAP3XML_SPEC_VAR)!=NULL)     /* a. tap3xml environment variable */
        specdir_list.push_back(getenv(TAP3XML_SPEC_VAR));

    if (getenv("HOME")!=NULL)               /* b. unix $HOME/Spec/ */
        specdir_list.push_back(string(getenv("HOME"))+"/"+SPEC_DIR);

    if (getenv("HOMEPATH")!=NULL)           /* c. windows %HOMEPATH%\Spec\ */
        specdir_list.push_back(string(getenv("HOMEPATH"))+"/"+SPEC_DIR);

    if ((slash_pos = string(argv[0]).find_last_of("/\\")) != string::npos) /* e. path of the binary */
        specdir_list.push_back(string(argv[0]).substr(0,slash_pos)+"/"+SPEC_DIR);

    if (getenv("PATH")!=NULL) {             /* f. parse the PATH environment variable */
        path_env = getenv("PATH");

        if (path_env.find("\\") != string::npos)
            path_delim = ';'; /* windows */
        else
            path_delim = ':'; /* unix */

        i = 0;
        j = path_env.find(path_delim);
        for (;j < path_env.length(); i = ++j, j = path_env.find(path_delim, j))
        {
            if (j != string::npos)
                path_item = path_env.substr(i, j-i);
            else
                path_item = path_env.substr(i, path_env.length()-i);

            specdir_list.push_back(path_item+"/"+SPEC_DIR);
        }
    }

    specdir_list.push_back(SPEC_DIR); /* f. ./Specs directory */


    /* 3. Checking arguments */

    if ( argc!=3 && argc!=4)
        help();

    option=string(argv[1]);
    if ( option != "-a" && option != "-x" )
        help();

    filein =string(argv[2]);
    if (argc==3)
    {
        if (filein.find_last_of("/") != string::npos)           // unix style
            fileout=filein.substr(filein.find_last_of("/")+1,string::npos);
            if (filein.find_last_of("\\") != string::npos)      // windows style 
                fileout=filein.substr(filein.find_last_of("\\")+1,string::npos);
            else
                fileout=filein;

        if (option == "-a")
            fileout+=".asn";
        else
            fileout="";
        //fileout+=(option=="-a" ? ".asn" : ".xml");
    }
    else
        fileout=string(argv[3]);


    /* 4. TAP3 -> XML Conversion */

    if ( option == "-x" )
    {
        string      header=XML_HEADER;

        Buffin*     bfin_asn= new Buffin(filein,0);
        Buffout*    bfout_asn = NULL;

        string      spec_filename;
        string      spec_suplfilename;
        
        treenode*   tree = new treenode();

        TapInfo*    tapinfo = new TapInfo();
        tapinfo->buffin(bfin_asn);

        if(tapinfo->type()=="ERR")
        {
            cerr << "Error. Unable to get version of file: " << filein << endl;
            exit(1);
        }

        spec_filename=get_specfilename(tapinfo);

        Asn *asn=new Asn();
        asn->specfile(spec_filename);
        if (tapinfo->type()=="RAP")
        {
            spec_suplfilename=get_specsuplfilename(tapinfo);
            asn->specsuplfile(spec_suplfilename);
        }
        asn->specroot(tapinfo->type()=="TAP" ? "DataInterChange" : "RapDataInterChange");
        asn->buffin(bfin_asn);
        asn->tree(tree);
        asn->decode();

        if (fileout == "")
            bfout_asn= new Buffout();
        else
            bfout_asn= new Buffout(fileout);

        Xml *xml=new Xml();
        xml->buffout(bfout_asn);
        xml->tree(tree);
        xml->set_header(&header);
        xml->encode();

        delete xml;
        delete bfout_asn;
        delete asn;
        delete tapinfo;
        free_treenode(tree);
        delete bfin_asn;
    }


    /* 5. XML -> TAP3 Conversion */

    if ( option == "-a" )
    {
        string    spec_filename;
        string    spec_suplfilename;
        
        treenode *tree=new treenode();

        Xml *xml=new Xml();
        xml->ifile(filein);
        xml->tree(tree);
        xml->decode();
        TapInfo *tapinfo=  new TapInfo();
        tapinfo->tree(tree);

        if(tapinfo->type()=="ERR")
        {
            cerr << "Error. Unable to get version of file: " << filein << endl;
            exit(1);
        }

        spec_filename=get_specfilename(tapinfo);

        Asn *asn=new Asn();
        asn->specfile(spec_filename);
        if (tapinfo->type()=="RAP")
        {
            spec_suplfilename=get_specsuplfilename(tapinfo);
            asn->specsuplfile(spec_suplfilename);
        }
        asn->specroot(tapinfo->type()=="TAP" ? "DataInterChange" : "RapDataInterChange");
        asn->ofile(fileout);
        asn->tree(tree);
        asn->encode();

        delete asn;
        delete tapinfo;
        delete xml;
        free_treenode(tree);

    }

    exit(0);

}

void help()
{
    cerr << "Copyright (C) 2005-2016 Javier Gutierrez <http://www.tap3edit.com>\n";
    cerr << "Usage: tap3xml -x|-a inputfile [outputfile]\n";
    cerr << "  -x: ASN -> XML\n";
    cerr << "  -a: XML -> ASN\n";
    exit(1);
}

string get_specfilename(TapInfo *tapinfo)
{
    ostringstream    spec_filename;

    spec_filename << tapinfo->type();
    spec_filename << setw(2) << setfill('0') << tapinfo->version();
    spec_filename << setw(2) << setfill('0') << tapinfo->release();
    spec_filename << ".asn";

    return get_specdir(spec_filename.str());
}

string get_specsuplfilename (TapInfo *tapinfo)
{
    ostringstream    spec_filename;

    spec_filename << "TAP";
    spec_filename << setw(2) << setfill('0') << tapinfo->suplversion();
    spec_filename << setw(2) << setfill('0') << tapinfo->suplrelease();
    spec_filename << ".asn";

    return get_specdir(spec_filename.str());
}

string get_specdir(const string &filename)
{

    vector<string>::iterator    vii;
    FILE *tmp;

    for (vii=specdir_list.begin();vii!=specdir_list.end();vii++)
    {
        if ((tmp=fopen(((*vii)+"/"+filename).c_str(),"rb")) != NULL)
        {
            fclose(tmp);
            return ((*vii)+"/"+filename);
        }
    }

    return string (filename);

}
